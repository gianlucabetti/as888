000001000000      /IF NOT DEFINED(PROTOTYPE_UBTL05R01)
000002000000      /UNDEFINE GENERATOR_SERIALIZERS
000003000000      *======================================================================
000004000000      *  Generated by WSDL2RPG 1.16.0beta / 07.04.2014
000005000000      *  Built on Set 17, 2014 (11:54:56)
000006000000      *  Built for V7R1M0
000007000000      *  Based on WS_OPER 1.16.0beta4 - 07.04.2014
000008000000      *======================================================================
000009000000      *
000010000000      *   This source member is the RPG web service stub of the
000011000000      *   following Web Service operation:
000012000000      *
000013000000      *      Port      :  TLAddressFinderWSClassSoap
000014000000      *      Operation :  NormalizeOne()
000015000000      *
000016000000      *   Please search for 'INFO:' to get basic information how to call
000017000000      *   the web service.
000018000000      *
000019000000      *   Default attachment handling (for demonstration) was added to
000020000000      *   WS_OPER but is disabled by default.
000021000000      *
000022000000      *   In order to enable or disable default attachment handling you have
000023000000      *   to define or undefine the following compiler condition name:
000024000000      *      DEFAULT_ATTACHMENT_HANDLING
000025000000      /UNDEFINE DEFAULT_ATTACHMENT_HANDLING
000026000000      *
000027000000      *   By default attachments are stored in folder:
000028000000      *      '/tmp/attachments'
000029000000      *
000030000000      *   You can change the default attachment folder by calling the
000031000000      *   following procedure before calling the web service:
000032000000      *      TLAddressFinderWSClassSoap_Attachments_setFolder()
000033000000      *
000034000000      *   Default attachment handling was added to demonstrate how
000035000000      *   to manage attachments. Please search the generate stub
000036000000      *   module for 'TODO:' to see what code belongs to attachment
000037000000      *   support.
000038000000      *
000039000000      *======================================================================
000040000000      *   Pre-Compiler tags used by STRPREPRC to retrieve creation
000041000000      *   commands from the source member.
000042000000      * ---------------------------------------------------------------------
000043000000      * >>PRE-COMPILER<<
000044000000      *   >>CRTCMD<< CRTRPGMOD    MODULE(&LI/&OB) +
000045000000      *                           SRCFILE(&SL/&SF) +
000046000000      *                           SRCMBR(&SM);
000047000000      *   >>COMPILE<<
000048000000      *     >>PARM<< TRUNCNBR(*NO);
000049000000      *     >>PARM<< DBGVIEW(*LIST);
000050000000      *     >>PARM<< OPTION(*EVENTF);
000051000000      *   >>END-COMPILE<<
000052000000      *   >>EXECUTE<<
000053000000      * >>END-PRE-COMPILER<<
000054000000      *======================================================================
000055000000     H NOMAIN
000056000000     H DEBUG
000057000000     H OPTION(*SRCSTMT : *NODEBUGIO)
000058000000     H EXTBININT(*YES)
000059000000      *
000060000000      *  Do not change or remove this compiler condition!
000061000000      /DEFINE NO_CONST_ON_INPUT_PARAMETERS
000062000000      /ENDIF
000063000000      /IF NOT DEFINED(PROTOTYPE_DEFINED_UBTL05R01)
000064000000      /DEFINE PROTOTYPE_DEFINED_UBTL05R01
000065000000      *
000066000000      * INFO:
000067000000      * This is the procedure you call to consume the Web Service:
000068000000      * ----------------------------------------------------------
000069000000      * Operation: NormalizeOne
000070000000      * Returns  : NormalizeOneResponse
000071000000      *
000072000000      * INFO:
000073000000      * Define your own fields using the type templates used in the prototype
000074000000      * below. Use LIKE(*_t) or LIKEDS(*_t) to define these fields.
000075000000      * All type templates of this web service are defined in web service
000076000000      * module:   UBTL05R
000077000000      *
000078000000     D TLAddressFinderWSClassSoap_NormalizeOne...
000079000000     D                 PR                  likeds(tns_NormalizeOneResponse_t)
000080000000     D                                     extproc('TLAddressFinderWSClassSoap_+
000081000000     D                                     NormalizeOne')
000082000000     D  i_tns_NormalizeOne...
000083000000     D                                     likeds(tns_NormalizeOne_t)
000084000000      /IF NOT DEFINED(NO_CONST_ON_INPUT_PARAMETERS)
000085000000     D                                     const
000086000000      /ENDIF
000087000000     D  o_msg                              like(wsdl_errText_t )
000088000000      *
000089000000      * This procedure adds a file attachment. The attachment
000090000000      * is sent to the server the next time the web service is called.
000091000000     D TLAddressFinderWSClassSoap_...
000092000000     D NormalizeOne_...
000093000000     D Attachments_addFile...
000094000000     D                 PR                        like(wsdl_partID_t)
000095000000     D                                     extproc('+
000096000000     D                                     TLAddressFinderWSClassSoap_+
000097000000     D                                     NormalizeOne_+
000098000000     D                                     Attachments_addFile+
000099000000     D                                     ')
000100000000     D  i_path                             const like(wsdl_path_t)
000101000000     D  i_contentType                      const like(wsdl_contentType_t)
000102000000     D  i_transferEncoding...
000103000000     D                                     const like(
000104000000     D                                           wsdl_contentTransferEncoding_t)
000105000000     D                                           options(*nopass: *omit)
000106000000     D  i_suggestedFileName...
000107000000     D                                     const like(wsdl_path_t)
000108000000     D                                           options(*nopass: *omit)
000109000000      *
000110000000      * This procedure adds a buffer attachment. The attachment
000111000000      * is sent to the server the next time the web service is called.
000112000000     D TLAddressFinderWSClassSoap_...
000113000000     D NormalizeOne_...
000114000000     D Attachments_addBuffer...
000115000000     D                 PR                        like(wsdl_partID_t)
000116000000     D                                     extproc('+
000117000000     D                                     TLAddressFinderWSClassSoap_+
000118000000     D                                     NormalizeOne_+
000119000000     D                                     Attachments_addBuffer+
000120000000     D                                     ')
000121000000     D  i_name                             const like(wsdl_path_t)
000122000000     D  i_pBuffer                      *   const
000123000000     D  i_size                       10I 0 const
000124000000     D  i_contentType                      const like(wsdl_contentType_t)
000125000000     D  i_transferEncoding...
000126000000     D                                     const like(
000127000000     D                                           wsdl_contentTransferEncoding_t)
000128000000     D                                           options(*nopass: *omit)
000129000000     D  i_targetCcsid                10I 0 const options(*nopass: *omit)
000130000000      *
000131000000      * This procedure adds a string attachment. The attachment
000132000000      * is sent to the server the next time the web service is called.
000133000000     D TLAddressFinderWSClassSoap_...
000134000000     D NormalizeOne_...
000135000000     D Attachments_addString...
000136000000     D                 PR                        like(wsdl_partID_t)
000137000000     D                                     extproc('+
000138000000     D                                     TLAddressFinderWSClassSoap_+
000139000000     D                                     NormalizeOne_+
000140000000     D                                     Attachments_addString+
000141000000     D                                     ')
000142000000     D  i_name                             const like(wsdl_path_t)
000143000000     D  i_string                  32767A         varying options(*varsize)
000144000000     D  i_contentType                      const like(wsdl_contentType_t)
000145000000     D  i_transferEncoding...
000146000000     D                                     const like(
000147000000     D                                           wsdl_contentTransferEncoding_t)
000148000000     D                                           options(*nopass: *omit)
000149000000     D  i_targetCcsid                10I 0 const options(*nopass: *omit)
000150000000      *
000151000000 CPY  /COPY QWSDL2RPG,TYPES_H
000152000000      *
000153000000      /DEFINE PROTOTYPE_UBTL05R
000154000000 CPY  /COPY GAITRASRC/SRCUB,UBTL05R                Web Service: Web Service Proc
000155000000      /UNDEFINE PROTOTYPE_UBTL05R
000156000000      *
000157000000      /ENDIF
000158000000      /IF DEFINED(PROTOTYPE_UBTL05R01)
000159000000      /EOF
000160000000      /ENDIF
000161000000      * ---------------------------------------------------------------------
000162000000      *
000163000000 CPY  /COPY QBASICS1,PBASICS1                      Tools/400 Runtime Library
000164000000 CPY  /COPY QMIME,PMIME                            Tools/400 MIME Parser
000165000000 CPY  /COPY QMIME,HTTPMIME_H                       Tools/400 MIME Parser to HTTP API adapter
000166000000 CPY  /COPY QRPGLESRC,HTTPAPI_H                    HTTP-API Service Program
000167000000 CPY  /COPY QWSDL2RPG,PWSDL2R70                    WSDL2RPG: HTTP API Header Extensions
000168000000 CPY  /COPY QWSDL2RPG,PWSDL2R71                    WSDL2RPG: HTTP Debug Log
000169000000 CPY  /COPY QWSDL2RPG,PWSDL2R79                    WSDL2RPG: Static Array
000170000000 CPY  /COPY QWSDL2RPG,PWSDL2R85                    WSDL2RPG: MessageContext
000171000000 CPY  /COPY QWSDL2RPG,PWSDL2R86                    WSDL2RPG: Stream
000172000000 CPY  /COPY QWSDL2RPG,PWSDL2R87                    WSDL2RPG: ManagedMemoryDataSource
000173000000 CPY  /COPY QWSDL2RPG,PWSDL2R88                    WSDL2RPG: Public Helper Procedures
000174000000 CPY  /COPY QWSDL2RPG,PWSDL2R90                    WSDL2RPG: AppMsg
000175000000 CPY  /COPY QWSDL2RPG,PWSDL2R94                    WSDL2RPG: MultiRef
000176000000 CPY  /COPY QWSDL2RPG,PWSDL2R97                    WSDL2RPG: eXpat Adapter
000177000000 CPY  /COPY QWSDL2RPG,PWSDL2R98                    WSDL2RPG: UnMarshaller/Marshaller
000178000000 CPY  /COPY QWSDL2RPG,PWSDL2R42                    WSDL2RPG: User name and password
000179000000      *
000180000000      * ------------------------------------
000181000000      *  Internal prototypes
000182000000      * ------------------------------------
000183000000      *
000184000000      *   Reopens a given input stream in order to send it over
000185000000      *   the wire again.
000186000000     D reOpenInputStream...
000187000000     D                 PR                         like(wsdl_hStream_t    )
000188000000     D                                     extproc('+
000189000000     D                                     reOpenInputStream+
000190000000     D                                     ')
000191000000     D  i_hMsgCtx                          const  like(wsdl_hMsgCtx_t    )
000192000000     D  i_hInpStream                       value  like(wsdl_hStream_t    )
000193000000      *
000194000000      *   Login in to proxy server or http server.
000195000000     D login...
000196000000     D                 PR            10I 0
000197000000     D                                     extproc('+
000198000000     D                                     login+
000199000000     D                                     ')
000200000000      *
000201000000      *   Sets the content type and the SOAP action of the POST message.
000202000000     D HTTP_setContentTypeAndSOAPAction...
000203000000     D                 PR
000204000000     D                                     extproc('+
000205000000     D                                     HTTP_setContentTypeAndSOAPAction+
000206000000     D                                     ')
000207000000     D  o_addlHdrs                 1024A          varying
000208000000     D  i_pUserData                    *   value
000209000000      *
000210000000     D tns_NormalizeOneResponseStart...
000211000000     D                 PR
000212000000     D                                     extproc('tns_NormalizeOneResponseSta+
000213000000     D                                     rt')
000214000000     D  userdata                       *   value
000215000000     D  depth                        10I 0 value
000216000000     D  namespace                  1024A   varying const
000217000000     D  name                       1024A   varying const
000218000000     D  path                      24576A   varying const
000219000000     D  attrs                          *   dim(32767)
000220000000     D                                     const options(*varsize)
000221000000     D tns_NormalizeOneResponseEnd...
000222000000     D                 PR
000223000000     D                                     extproc('tns_NormalizeOneResponseEnd+
000224000000     D                                     ')
000225000000     D  userdata                       *   value
000226000000     D  depth                        10I 0 value
000227000000     D  namespace                  1024A   varying const
000228000000     D  name                       1024A   varying const
000229000000     D  path                      24576A   varying const
000230000000     D  value                     65535A   varying
000231000000     D  attrs                          *   dim(32767)
000232000000     D                                     const options(*varsize)
000233000000      *
000234000000      *   Append a given data buffer to the specified output stream.
000235000000     D OutputStream_appendBuffer...
000236000000     D                 PR                  extproc('+
000237000000     D                                     OutputStream_appendBuffer+
000238000000     D                                     ')
000239000000     D  i_hStream                          value  like(wsdl_hStream_t)
000240000000     D  i_data                         *   value
000241000000     D  i_length                     10I 0 value
000242000000      *
000243000000      *   Append the content of the global request buffer
000244000000      *   (g_requestBuffer) to the specified output stream
000245000000      *   and afterwards clears the buffer.
000246000000     D OutputStream_appendGlobalRequestBuffer...
000247000000     D                 PR                  extproc('+
000248000000     D                                     OutputStream_+
000249000000     D                                     appendGlobalRequestBuffer+
000250000000     D                                     ')
000251000000     D  i_hStream                    10I 0 value
000252000000     D  io_requestBuffer...
000253000000     D                            65535A          varying options(*varsize)
000254000000      *
000255000000      *   Receive response of Hendif;
000256000000     D HTTP_receiveResponse...
000257000000     D                 PR            10I 0 extproc('+
000258000000     D                                     HTTP_receiveResponse+
000259000000     D                                     ')
000260000000     D  i_hStream                    10I 0 value
000261000000     D  i_data                         *   value
000262000000     D  i_length                     10I 0 value
000263000000      *
000264000000      *   Parses or redirects the web service response.
000265000000     D parseOrRedirectResponse...
000266000000     D                 PR              N   extproc('+
000267000000     D                                     parseOrRedirectResponse+
000268000000     D                                     ')
000269000000     D  i_data                         *   value
000270000000     D  i_length                     10I 0 value
000271000000      *
000272000000      *   SOAP message: Envelope
000273000000     D SOAPMessage_Envelope...
000274000000     D                 PR                  extproc('+
000275000000     D                                     SOAPMessage_Envelope+
000276000000     D                                     ')
000277000000     D   userdata                      *   value
000278000000     D   depth                       10I 0 value
000279000000     D   namespace                 1024A   varying const
000280000000     D   name                      1024A   varying const
000281000000     D   path                     24576A   varying const
000282000000     D   attrs                         *   dim(32767)
000283000000     D                                     const options(*varsize)
000284000000      *
000285000000      *   SOAP message: fault information
000286000000     D SOAPMessage_FaultStart...
000287000000     D                 PR                  extproc('+
000288000000     D                                     SOAPMessage_FaultStart+
000289000000     D                                     ')
000290000000     D   userdata                      *   value
000291000000     D   depth                       10I 0 value
000292000000     D   namespace                 1024A   varying const
000293000000     D   name                      1024A   varying const
000294000000     D   path                     24576A   varying const
000295000000     D   attrs                         *   dim(32767)
000296000000     D                                     const options(*varsize)
000297000000      *
000298000000      *   SOAP message: fault information
000299000000     D SOAPMessage_FaultEnd...
000300000000     D                 PR                  extproc('+
000301000000     D                                     SOAPMessage_FaultEnd+
000302000000     D                                     ')
000303000000     D   userdata                      *   value
000304000000     D   depth                       10I 0 value
000305000000     D   namespace                 1024A   varying const
000306000000     D   name                      1024A   varying const
000307000000     D   path                     24576A   varying const
000308000000     D   value                    65535A   varying const
000309000000     D   attrs                         *   dim(32767)
000310000000     D                                     const options(*varsize)
000311000000      *
000312000000      *   SOAP message: fault details
000313000000     D SOAPMessage_FaultDetailStart...
000314000000     D                 PR                  extproc('+
000315000000     D                                     SOAPMessage_FaultDetailStart+
000316000000     D                                     ')
000317000000     D   userdata                      *   value
000318000000     D   depth                       10I 0 value
000319000000     D   namespace                 1024A   varying const
000320000000     D   name                      1024A   varying const
000321000000     D   path                     24576A   varying const
000322000000     D   attrs                         *   dim(32767)
000323000000     D                                     const options(*varsize)
000324000000      *
000325000000      *   SOAP message: fault details
000326000000     D SOAPMessage_FaultDetailEnd...
000327000000     D                 PR                  extproc('+
000328000000     D                                     SOAPMessage_FaultDetailEnd+
000329000000     D                                     ')
000330000000     D   userdata                      *   value
000331000000     D   depth                       10I 0 value
000332000000     D   namespace                 1024A   varying const
000333000000     D   name                      1024A   varying const
000334000000     D   path                     24576A   varying const
000335000000     D   value                    65535A   varying const
000336000000     D   attrs                         *   dim(32767)
000337000000     D                                     const options(*varsize)
000338000000      *
000339000000      *   SOAP message: NULL callback procedure
000340000000     D SOAPMessage_unexpectedElementStart...
000341000000     D                 PR
000342000000     D                                     extproc('+
000343000000     D                                     SOAPMessage_unexpectedElementStart+
000344000000     D                                     ')
000345000000     D   userdata                      *   value
000346000000     D   depth                       10I 0 value
000347000000     D   namespace                 1024A   varying const
000348000000     D   name                      1024A   varying const
000349000000     D   path                     24576A   varying const
000350000000     D   attrs                         *   dim(32767)
000351000000     D                                     const options(*varsize)
000352000000      *
000353000000      *   SOAP message: NULL callback procedure
000354000000     D SOAPMessage_unexpectedElementEnd...
000355000000     D                 PR
000356000000     D                                     extproc('+
000357000000     D                                     SOAPMessage_unexpectedElementEnd+
000358000000     D                                     ')
000359000000     D   userdata                      *   value
000360000000     D   depth                       10I 0 value
000361000000     D   namespace                 1024A   varying const
000362000000     D   name                      1024A   varying const
000363000000     D   path                     24576A   varying const
000364000000     D   value                    65535A   varying const
000365000000     D   attrs                         *   dim(32767)
000366000000     D                                     const options(*varsize)
000367000000      *
000368000000     D ignoreUnexpectedSoapHeader...
000369000000     D                 PR              N
000370000000     D                                     extproc('+
000371000000     D                                     ignoreUnexpectedSoapHeader+
000372000000     D                                     ')
000373000000      *
000374000000     D getOperationUuid...
000375000000     D                 PR                          like(wsdl_uuid_t )
000376000000     D                                     extproc('+
000377000000     D                                     getOperationUuid+
000378000000     D                                     ')
000379000000      *
000380000000     D getPortName...
000381000000     D                 PR                          like(wsdl_portName_t )
000382000000     D                                     extproc('+
000383000000     D                                     getPortName+
000384000000     D                                     ')
000385000000      *
000386000000     D getOperationName...
000387000000     D                 PR                          like(wsdl_operName_t )
000388000000     D                                     extproc('+
000389000000     D                                     getOperationName+
000390000000     D                                     ')
000391000000      *
000392000000     D getPostCcsid...
000393000000     D                 PR            10I 0
000394000000     D                                     extproc('+
000395000000     D                                     getPostCcsid+
000396000000     D                                     ')
000397000000      *
000398000000     D getTimeout...
000399000000     D                 PR            10I 0
000400000000     D                                     extproc('+
000401000000     D                                     getTimeout+
000402000000     D                                     ')
000403000000      *
000404000000     D getUserAgent...
000405000000     D                 PR                         like(wsdl_userAgent_t )
000406000000     D                                     extproc('+
000407000000     D                                     getUserAgent+
000408000000     D                                     ')
000409000000      *
000410000000     D getMessageContext...
000411000000     D                 PR                         like(wsdl_hMsgCtx_t)
000412000000     D                                     extproc('+
000413000000     D                                     getMessageContext+
000414000000     D                                     ')
000415000000      *
000416000000     D mustRedirectStmf...
000417000000     D                 PR              N
000418000000     D                                     extproc('+
000419000000     D                                     mustRedirectStmf+
000420000000     D                                     ')
000421000000      *
000422000000      * ------------------------------------
000423000000      *  Global fields & constants
000424000000      * ------------------------------------
000425000000      *
000426000000      *   Release, the client stub was compiled for
000427000000     D COMPILED_FOR...
000428000000     D                 C                   'V7R1M0'
000429000000      *
000430000000      *   UUID of the web service operation as generated by WSDL2RPG
000431000000      *   (Using UUID of web service port for all operations by default)
000432000000      *cOPERATION_UUID...
000433000000      *                C                   '0700A0043EA119A695E80004AC18DC9A'
000434000000      *
000435000000      *   SOAP response header
000436000000      *
000437000000      *   Reference to the 'respSoapHeader' field.
000438000000     D g_pRespSoapHeader...
000439000000     D                 S               *   inz
000440000000      *
000441000000      *   XMLSAXParser handle
000442000000     D g_hSAXParser    S                   like(xmlSaxParser_handle_t) inz
000443000000      *
000444000000      *   MIME parser
000445000000     D g_hMIMEParser   S                   like(mime_hMime_t ) inz
000446000000      *
000447000000      *   MIME message indicator
000448000000     D g_isMimeMessage...
000449000000     D                 S               N   inz(cFalse)
000450000000      *
000451000000      *   Content ID of the SOAP message part
000452000000     D g_SOAPMessageID...
000453000000     D                 S            512A   varying inz
000454000000      *
000455000000      *   Indicator "parse SOAP message"
000456000000     D g_doParseSOAPMessage...
000457000000     D                 S               N   inz(cFalse)
000458000000      *
000459000000      *   Indicator "SOAP message parsed"
000460000000     D g_SOAPMessage_done...
000461000000     D                 S               N   inz(cFalse)
000462000000      *
000463000000      *   Body part counter
000464000000     D g_BodyPart_counter...
000465000000     D                 S             10I 0 inz
000466000000      *
000467000000      *   HTTP response "initialized" indicator
000468000000     D g_HTTP_isInit...
000469000000     D                 S               N   inz(cFalse)
000470000000      *
000471000000      *   Error information of web service operation
000472000000     D g_errors        DS                  likeds(wsdl_errors_t    ) inz
000473000000      *
000474000000      *   Switch for AXIS bug AXIS-2095
000475000000     D g_isAXIS_2095   S               N   inz(cFalse)
000476000000      *
000477000000      *   Message context
000478000000     D g_hMsgCtx       S                   like(wsdl_hMsgCtx_t) inz
000479000000      *
000480000000      *   Global buffer to build the request message.
000481000000     D g_requestBuffer...
000482000000     D                 S          65535A   varying inz
000483000000      *
000484000000      * -------------------------------------------
000485000000      *  TODO: Added to implement default
000486000000      *        attachment handling.
000487000000      * -------------------------------------------
000488000000      /IF DEFINED(DEFAULT_ATTACHMENT_HANDLING)
000489000000 CPY  /COPY QWSDL2RPG,CLIB                         C Runtime Library
000490000000      *
000491000000      *  User data scoped to the current part
000492000000     D partUserData_t...
000493000000     D                 DS                  qualified               based(pDummy)
000494000000     D  FD                           10i 0
000495000000      *
000496000000      /ENDIF
000497000000      * =====================================================================
000498000000      * Operation: NormalizeOne
000499000000      * Returns  : NormalizeOneResponse
000500000000      * =====================================================================
000501000000     P TLAddressFinderWSClassSoap_NormalizeOne...
000502000000     P                 B                   export
000503000000     D                 PI                  likeds(tns_NormalizeOneResponse_t)
000504000000     D  i_tns_NormalizeOne...
000505000000     D                                     likeds(tns_NormalizeOne_t)
000506000000     D  o_msg                       128A   varying
000507000000      *
000508000000      *  Return value
000509000000     D rtnValue        DS                  likeds(tns_NormalizeOneResponse_t)
000510000000     D                                     inz
000511000000      *
000512000000      *  Local fields
000513000000     D isUnexpectedError...
000514000000     D                 S               N   inz(cFalse)
000515000000     D url             S          32767A   varying
000516000000     D http_rc         S             10I 0 inz
000517000000     D rcvm0200        DS                  likeds(rcvm0200_t    ) inz
000518000000     D msg             DS                  likeds(msg_t         ) inz
000519000000     D headers         DS                  likeds(wsdl_headers_t) inz
000520000000      *
000521000000     D hMsgCtx         S                   like(wsdl_hMsgCtx_t       ) inz
000522000000     D hSoapPart       S                   like(wsdl_hDataSource_t   ) inz
000523000000     D hOutStream      S                   like(wsdl_hStream_t       ) inz
000524000000     D hSAXParser      S                   like(xmlSaxParser_handle_t) inz
000525000000     D hMIMEParser     S                   like(mime_hMime_t         ) inz
000526000000     D hInpStream      S                   like(wsdl_hStream_t       ) inz
000527000000     D contentType     S                   like(wsdl_contentType_t   ) inz
000528000000      *
000529000000      *   Proxy server to use
000530000000     D httpProxy       DS                  likeds(wsdl_proxy_t     ) inz
000531000000      *
000532000000      *  Login helper fields
000533000000     D err             S             10I 0 inz
000534000000      *
000535000000      *  Dynamic array index fields
000536000000      *
000537000000      *  Dynamic array item fields
000538000000      *
000539000000      *  User data
000540000000     D userData        DS                  likeds(tns_NormalizeOneResponse_t)
000541000000     D                                     inz
000542000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
000543000000      /free
000544000000
000545000000         o_msg = '';
000546000000
000547000000         monitor;
000548000000
000549000000            // Initialize web service stub
000550000000            TLAddressFinderWSClassSoap_Port_initialize(
000551000000                  getOperationName());
000552000000
000553000000            // Enable/disable HTTP debug log
000554000000            // Starting with v1.15 the debug log is started in
000555000000            // procedure http_DebugLog_open() which is called by
000556000000            // WebServiceStub_Port_setHttpDebug().
000557000000
000558000000            http_DebugLog_appendText(
000559000000            '** ' + %char(%timestamp()) + ': Entering ' + f_this() + '()' +
000560000000            ', compiled for ' + COMPILED_FOR);
000561000000
000562000000            // Initialize map to manage <multiRef> elements
000563000000            MultiRef_new();
000564000000
000565000000            // Remove all attachments of this service from the list of attachments
000566000000            TLAddressFinderWSClassSoap_Attachments_removeAll(
000567000000                  getOperationUuid());
000568000000
000569000000            // Set proxy server to use
000570000000            httpProxy = TLAddressFinderWSClassSoap_Port_getHttpProxy();
000571000000            http_setproxy(httpProxy.server: httpProxy.port);
000572000000
000573000000            // Set CCSID for POST data according
000574000000            // to the encoding of the SOAP envelope
000575000000            HTTP_SetCCSIDs(getPostCcsid(): HTTP_EBCDIC);
000576000000
000577000000            // Get (create) the message context and get the SOAP part.
000578000000            // Be sure to specify a reasonable cache size for best performance.
000579000000            // Best performance is guaranteed, when the memory cache
000580000000            // is large enough to take the complete XML request message.
000581000000            hMsgCtx = getMessageContext();
000582000000            hSoapPart = MessageContext_getSoapPart(hMsgCtx: 1024*1024*4); // 4 MB cache
000583000000            MessageContext_setSoapAction(hMsgCtx:
000584000000               'http://tempuri.org/NormalizeOne'
000585000000               );
000586000000
000587000000            // Produce SOAP request message
000588000000            http_DebugLog_appendTextVerbose(
000589000000            '** ' + %char(%timestamp()) + ': Producing request messsage');
000590000000
000591000000            // Open data source and write the request message to it
000592000000            contentType = 'text/xml';
000593000000            hOutStream = ManagedMemoryDataSource_OutputStream_open(
000594000000                               hSoapPart: contentType: getPostCcsid());
000595000000
000596000000            g_requestBuffer =
000597000000               '<?xml version="1.0" encoding="UTF-8"?>'                     +
000598000000               '<soapenv:Envelope'                                          +
000599000000               ' xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"';
000600000000            OutputStream_appendBuffer(
000601000000                  hOutStream: %addr(g_requestBuffer)+2: %len(g_requestBuffer));
000602000000
000603000000            // Namespaces
000604000000            g_requestBuffer =
000605000000            ' xmlns:tns="http://tempuri.org/"' +
000606000000               '>';
000607000000
000608000000            OutputStream_appendBuffer(
000609000000                  hOutStream: %addr(g_requestBuffer)+2: %len(g_requestBuffer));
000610000000
000611000000            // SOAP header
000612000000
000613000000            // Message body
000614000000            g_requestBuffer =
000615000000               '<soapenv:Body>' +
000616000000         '<tns:NormalizeOne>' +
000617000000         '<tns:Xml>' +
000618000000            '';
000619000000
000620000000         if (%len(g_requestBuffer) > 0);
000621000000            // Add previous bytes of request message to output stream
000622000000            ManagedMemoryDataSource_OutputStream_write(hOutStream: %addr(g_re...
000623000000            questBuffer: *DATA):%len(g_requestBuffer));
000624000000            clear g_requestBuffer;
000625000000         endif;
000626000000
000627000000         Marshaller_toStringV6(
000628000000            %addr(i_tns_NormalizeOne.Xml)
000629000000            : %addr(i_tns_NormalizeOne.Xml: *DATA)
000630000000            : %len(i_tns_NormalizeOne.Xml)
000631000000            : hOutStream);
000632000000
000633000000         g_requestBuffer =
000634000000         '</tns:Xml>' +
000635000000         '</tns:NormalizeOne>' +
000636000000               '</soapenv:Body>' +
000637000000               '</soapenv:Envelope>';
000638000000
000639000000            OutputStream_appendBuffer(
000640000000                  hOutStream: %addr(g_requestBuffer)+2: %len(g_requestBuffer));
000641000000
000642000000            // Close data source and prepare it to send the message
000643000000            ManagedMemoryDataSource_OutputStream_close(hOutStream);
000644000000            MessageContext_prepareToSend(hMsgCtx);
000645000000
000646000000            http_DebugLog_appendTextVerbose(
000647000000            '** ' + %char(%timestamp()) + ': Finished request message');
000648000000
000649000000            http_DebugLog_appendTextVerbose(
000650000000            '** ' + %char(%timestamp()) + ': Preparing to send message');
000651000000
000652000000            // Clear error code
000653000000            TLAddressFinderWSClassSoap_Port_clearErrors(
000654000000                  g_errors);
000655000000
000656000000            // HTTPAPI: Enables additional headers
000657000000            http_xproc(HTTP_POINT_ADDL_HEADER
000658000000                       : %paddr('HTTP_setContentTypeAndSOAPAction')
000659000000                       : %addr(headers));
000660000000
000661000000            // HTTPAPI: Add additional message headers
000662000000            clear headers;
000663000000 B01        if (MessageContext_isMIMEMessage(hMsgCtx));
000664000000               headers.mimeVersion =
000665000000                     MessageContext_getMimeVersionHeader(hMsgCtx);
000666000000 X01        else;
000667000000               headers.mimeVersion = '';
000668000000 E01        endif;
000669000000            headers.contentType = MessageContext_getContentTypeHeader(hMsgCtx);
000670000000            headers.soapAction = MessageContext_getSoapActionHeader(hMsgCtx);
000671000000
000672000000            // ---------------------------------------
000673000000            //   Post request and parse response
000674000000            // ---------------------------------------
000675000000
000676000000            // Create parser (callbacks style: HTTP API)
000677000000 B01        if (not mustRedirectStmf());
000678000000               XMLSAXParser_new(hSAXParser: cTrue);
000679000000               XMLSAXParser_setDoNamespaces(hSAXParser: cTrue);
000680000000               XMLSAXParser_registerCallback(hSAXParser
000681000000                  : cXML_CB_SAX_STARTELEMENT
000682000000                  : %paddr('SOAPMessage_Envelope'));
000683000000               XMLSAXParser_prepareParse(hSAXParser: %addr(userData));
000684000000 E01        endif;
000685000000
000686000000            // Create MIME parser in case we need it
000687000000            hMIMEParser = MIMEParser_new();
000688000000            MIMEParser_setDecodeData(hMIMEParser: cTrue);
000689000000            http_mime_DataSink_initialize(hMIMEParser
000690000000                                          : *NULL
000691000000                                          : %paddr('HTTPDataSink_startPart')
000692000000                                          : %paddr('HTTPDataSink_bodyData')
000693000000                                          : %paddr('HTTPDataSink_endPart'));
000694000000
000695000000            // Make parser available for HTTP_receiveResponse()
000696000000            g_hSAXParser    = hSAXParser;
000697000000            g_hMIMEParser   = hMIMEParser;
000698000000            g_isMimeMessage = cFalse;
000699000000            g_HTTP_isInit   = cFalse;
000700000000            g_SOAPMessageID = '';
000701000000            g_doParseSOAPMessage = cFalse;
000702000000            g_SOAPMessage_done   = cFalse;
000703000000            g_BodyPart_counter   = 0;
000704000000
000705000000            // Make SOAP response header available to SOAPMessage_Envelope
000706000000            g_pRespSoapHeader = *NULL;
000707000000
000708000000            // Open input stream in order to send the message
000709000000            hInpStream = MessageContext_InputStream_open(hMsgCtx);
000710000000
000711000000            // eXpat: Post request and parse response
000712000000            url = TLAddressFinderWSClassSoap_Endpoint_get();
000713000000
000714000000 B01        dou (not HttpResponse_isAuthenticationError(http_rc));
000715000000               // Get document from server and handle http redirects
000716000000               // See also: WSDL2R88.HttpResponse_isRedirect()
000717000000 B02           dou (not HttpResponse_isRedirect(http_rc));
000718000000                  http_DebugLog_appendText(
000719000000                  '** ' + %char(%timestamp()) + ': Sending request to server');
000720000000
000721000000                  http_rc =
000722000000                     http_url_post_raw2(
000723000000                        url
000724000000                        : hInpStream
000725000000                        : %paddr('WSDL2R85_MessageContext_InputStream_read')
000726000000                        : MessageContext_getSize(hMsgCtx)
000727000000                        : 0
000728000000                        : %paddr('HTTP_receiveResponse')
000729000000                        : getTimeout()
000730000000                        : getUserAgent()
000731000000                        : '');
000732000000
000733000000 B03              if (HttpResponse_isRedirect(http_rc));
000734000000                     url = http_redir_loc();
000735000000                     hInpStream = reOpenInputStream(hMsgCtx: hInpStream);
000736000000 E03              endif;
000737000000 E02           enddo;
000738000000
000739000000               // The first time we request a document that requires user/password
000740000000               // it will return a HTTP_NDAUTH error.
000741000000 B02           if (HttpResponse_isAuthenticationError(http_rc));
000742000000 B03              if (not TLAddressFinderWSClassSoap_Port_hasLoginCallback());
000743000000                     leave;
000744000000 E03              endif;
000745000000
000746000000 B03              if (login() <> WSDL_SUCCESS);
000747000000                     leave;
000748000000 E03              endif;
000749000000
000750000000                  hInpStream = reOpenInputStream(hMsgCtx: hInpStream);
000751000000 X02           else;
000752000000                  MultiRef_finalize();
000753000000                  err = 0;
000754000000 E02           endif;
000755000000 E01        enddo;
000756000000
000757000000            // Preserve parser error code and message text
000758000000 B01        if (err = HTTP_RDWERR);
000759000000               g_errors.xmlError.code = XMLToolkit_getError(
000760000000                                              hSAXParser
000761000000                                              : g_errors.xmlError.text
000762000000                                              : g_errors.xmlError.line
000763000000                                              : g_errors.xmlError.column);
000764000000 E01        endif;
000765000000
000766000000 B01        if (not mustRedirectStmf());
000767000000               XMLSAXParser_endParse(hSAXParser);
000768000000 E01        endif;
000769000000
000770000000 B01        if (g_isMimeMessage);
000771000000               MIMEParser_endParse(hMIMEParser);
000772000000               g_isMimeMessage = cFalse;
000773000000 E01        endif;
000774000000
000775000000            g_HTTP_isInit = cFalse;
000776000000
000777000000         on-error;
000778000000            isUnexpectedError = cTrue;
000779000000            rcvm0200 = f_rcvPgmMsg(cMsg_Any: *OMIT: cMsg_Act_Same: 0
000780000000                                   : cMsg_Same: cMsg_ToMyself);
000781000000            http_DebugLog_appendRcvMsg(rcvm0200);
000782000000            msg = f_cvtRcvMsgToMsg(rcvm0200);
000783000000            g_errors.errType        = WSDL_HTTP_ERROR_UNEXPECTED;
000784000000            g_errors.httpError.no   = WSDL_HTTP_ERROR_UNEXPECTED;
000785000000            g_errors.httpError.text = f_rtvMsgText(msg);
000786000000            http_rc = g_errors.httpError.no;
000787000000            o_msg = g_errors.httpError.text;
000788000000         endmon;
000789000000
000790000000         g_hSAXParser  = *NULL;
000791000000         g_hMIMEParser = *NULL;
000792000000
000793000000 B01     if (not isUnexpectedError);
000794000000 B02        if (err <> 0 or g_errors.errType <> WSDL_HTTP_SUCCESS);
000795000000 B03           if (err <> 0);
000796000000                  g_errors.errType = WSDL_HTTP_ERROR;
000797000000
000798000000                  // Set http error code and message text
000799000000                  g_errors.httpError.no   = err;
000800000000                  g_errors.httpError.text = http_error();
000801000000
000802000000                  // Return error message text to caller
000803000000                  o_msg = g_errors.httpError.text;
000804000000 X03           else;
000805000000                  o_msg = g_errors.soapFault.string;
000806000000 E03           endif;
000807000000               clear rtnValue;
000808000000            else;
000809000000               o_msg = '';
000810000000               rtnValue = userData;
000811000000            endif;
000812000000 E02     endif;
000813000000
000814000000 B02     if (TLAddressFinderWSClassSoap_RedirectResponse_isActive());
000815000000            TLAddressFinderWSClassSoap_RedirectResponse_terminate();
000816000000 E02     endif;
000817000000
000818000000 B02     if (not XMLSAXParser_isNull(hSAXParser));
000819000000            XMLSAXParser_delete(hSAXParser);
000820000000 E02     endif;
000821000000
000822000000 B02     if (not MIMEParser_isNull(hMIMEParser));
000823000000            MIMEParser_delete(hMIMEParser);
000824000000 E02     endif;
000825000000
000826000000 B02     if (not ManagedMemoryDataSource_isNull(hSoapPart));
000827000000 B03        if (ManagedMemoryDataSource_Stream_isOpen(hOutStream));
000828000000               ManagedMemoryDataSource_OutputStream_close(hOutStream);
000829000000 E03        endif;
000830000000            // *************************************************
000831000000            // Do not delete the the SOAP part (hSoapPart) here.
000832000000            // It is deleted by MessageContext_delete().
000833000000            // *************************************************
000834000000 E02     endif;
000835000000
000836000000 B02     if (not MessageContext_isNull(g_hMsgCtx));
000837000000 B03        if (MessageContext_InputStream_isOpen(hInpStream));
000838000000               MessageContext_InputStream_close(hInpStream);
000839000000 E03        endif;
000840000000            MessageContext_delete(g_hMsgCtx);
000841000000            g_hMsgCtx = MessageContext_null();
000842000000 E02     endif;
000843000000
000844000000 B02     if (not MultiRef_isNull());
000845000000            MultiRef_delete();
000846000000 E02     endif;
000847000000
000848000000         // Set error information of last service call
000849000000         TLAddressFinderWSClassSoap_Port_setErrors(
000850000000               g_errors);
000851000000
000852000000         http_DebugLog_appendText(
000853000000         '** ' + %char(%timestamp()) + ': Leaving ' + f_this() + '()');
000854000000
000855000000 B02     if (http_DebugLog_isOpen());
000856000000            http_DebugLog_close();
000857000000 E02     endif;
000858000000
000859000000         return rtnValue;
000860000000
000861000000      /end-free
000862000000      *
000863000000     P                 E
000864000000      *
000865000000      * =====================================================================
000866000000      *   Append a given data buffer to the specified output stream.
000867000000      * =====================================================================
000868000000     P OutputStream_appendBuffer...
000869000000 ERR P                 B
000870000000     D                 PI
000871000000     D  i_hStream                          value  like(wsdl_hStream_t)
000872000000     D  i_data                         *   value
000873000000     D  i_length                     10I 0 value
000874000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
000875000000      /free
000876000000
000877000000         if (i_length > 0);
000878000000            // Add previous bytes of request message to output stream
000879000000            ManagedMemoryDataSource_OutputStream_write(
000880000000                  i_hStream: i_data: i_length);
000881000000         endif;
000882000000
000883000000      /end-free
000884000000     P                 E
000885000000      *
000886000000      * =====================================================================
000887000000      *   Append the content of the global request buffer
000888000000      *   (g_requestBuffer) to the specified output stream
000889000000      *   and afterwards clears the buffer.
000890000000      * =====================================================================
000891000000     P OutputStream_appendGlobalRequestBuffer...
000892000000     P                 B
000893000000     D                 PI
000894000000     D  i_hStream                    10I 0 value
000895000000     D  io_requestBuffer...
000896000000     D                            65535A          varying options(*varsize)
000897000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
000898000000      /free
000899000000
000900000000         if (%len(io_requestBuffer) = 0);
000901000000            return;
000902000000         endif;
000903000000
000904000000         OutputStream_appendBuffer(
000905000000            i_hStream: %addr(io_requestBuffer)+2: %len(io_requestBuffer));
000906000000         clear io_requestBuffer;
000907000000
000908000000      /end-free
000909000000     P                 E
000910000000      *
000911000000      * =====================================================================
000912000000      * This procedure adds a file attachment. The attachment
000913000000      * is sent to the server the next time the web service is called.
000914000000      *
000915000000      * Parameters:
000916000000      *  i_path            Path to the file that is added as an attachment.
000917000000      *
000918000000      *  i_contentType     Specifies the type of the MIME data.
000919000000      *                    Possible values are:
000920000000      *
000921000000      *  Content type, example values:
000922000000      *
000923000000      *     application/octet-stream    executable file     *.bin *.exe *.com *.dll *.class
000924000000      *     application/pdf             Adobe PDF file      *.pdf
000925000000      *     application/rtf             Microsoft RTF file  *.rtf
000926000000      *     application/xml             XML file            *.xml
000927000000      *     application/zip             ZIP file            *.zip
000928000000      *     audio/x-mpeg                MPEG file           *.mp2
000929000000      *     image/gif                   GIF image           *.gif
000930000000      *     image/jpeg                  JPEG image          *.jpeg *.jpg *.jpe
000931000000      *     image/png                   PNG image           *.png
000932000000      *     image/tiff                  TIFF image          *.tiff *.tif
000933000000      *     text/comma-separated-values CSV file            *.csv
000934000000      *     text/rtf                    Microsoft RTF file  *.rtf
000935000000      *     text/xml                    XML file            *.xml
000936000000      *     text/plain                  Plain text file     *.txt
000937000000      *     video/mpeg                  MPEG video file     *.mpeg *.mpg *.mpe
000938000000      *
000939000000      *     See also: http://de.selfhtml.org/diverses/mimetypen.htm
000940000000      *
000941000000      *  i_contentType          Specifies the type of the MIME data.
000942000000      *
000943000000      *  i_transferEncoding     Specifies the encoding of the MIME data.
000944000000      *                         Possible values are:
000945000000      *
000946000000      *                         WSDL_MIME_BINARY - binary data, no encoding
000947000000      *                         WSDL_MIME_BASE64 - converted to base64
000948000000      *
000949000000      *  i_suggestedFileName    Is the suggested file for saving the
000950000000      *                         attachment. Goes into the
000951000000      *                         'Content-Disposition header', attribute 'filename'.
000952000000      *                         The content disposition is always 'attachment'.
000953000000      *
000954000000      * Return value:
000955000000      *  partID                 Unique ID of the attachment. Usually this ID
000956000000      *                         is stored in the SOAP message, depending on
000957000000      *                         the description of the Web Service.
000958000000      * =====================================================================
000959000000     P TLAddressFinderWSClassSoap_...
000960000000     P NormalizeOne_...
000961000000     P Attachments_addFile...
000962000000     P                 B                   export
000963000000     D                 PI                        like(wsdl_partID_t)
000964000000     D  i_path                             const like(wsdl_path_t)
000965000000     D  i_contentType                      const like(wsdl_contentType_t)
000966000000     D  i_transferEncoding...
000967000000     D                                     const like(
000968000000     D                                           wsdl_contentTransferEncoding_t)
000969000000     D                                           options(*nopass: *omit)
000970000000     D  i_suggestedFileName...
000971000000     D                                     const like(wsdl_path_t)
000972000000     D                                           options(*nopass: *omit)
000973000000      *
000974000000      *  Return value
000975000000     D partID          S                   like(wsdl_partID_t) inz
000976000000      *
000977000000      *  Parameter positions
000978000000     D p_transferEncoding...
000979000000     D                 C                   3
000980000000     D p_suggestedFileName...
000981000000     D                 C                   4
000982000000      *
000983000000      *  Optional parameters
000984000000     D transferEncoding...
000985000000     D                 S                   like(i_transferEncoding)
000986000000     D suggestedFileName...
000987000000     D                 S                   like(i_suggestedFileName)
000988000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
000989000000      /free
000990000000
000991000000         if (%parms() >= p_transferEncoding and
000992000000             %addr(i_transferEncoding) <> *NULL);
000993000000            transferEncoding = i_transferEncoding;
000994000000         else;
000995000000            transferEncoding = WSDL_MIME_BINARY;
000996000000         endif;
000997000000
000998000000         if (%parms() >= p_suggestedFileName and
000999000000             %addr(i_suggestedFileName) <> *NULL);
001000000000            suggestedFileName = i_suggestedFileName;
001001000000         else;
001002000000            suggestedFileName = '';
001003000000         endif;
001004000000
001005000000         partID = TLAddressFinderWSClassSoap_Attachments_addFile(
001006000000                        getMessageContext(): i_path:
001007000000                        i_contentType : transferEncoding: suggestedFileName);
001008000000
001009000000         return partID;
001010000000
001011000000      /end-free
001012000000     P                 E
001013000000      *
001014000000      * =====================================================================
001015000000      * This procedure adds a buffer attachment. The attachment
001016000000      * is sent to the server the next time the web service is called.
001017000000      *
001018000000      * Parameters:
001019000000      *  i_suggestedFileName    Is the suggested file for saving the
001020000000      *                         attachment. Goes into the
001021000000      *                         'Content-Disposition header', attribute 'filename'.
001022000000      *                         The content disposition is always 'attachment'.
001023000000      *
001024000000      *  i_pBuffer              Buffer, containing the attachment data.
001025000000      *
001026000000      *  i_size                 Size of the buffer.
001027000000      *
001028000000      *  i_contentType          Specifies the type of the MIME data.
001029000000      *
001030000000      *  i_transferEncoding     Specifies the encoding of the MIME data.
001031000000      *                         Possible values are:
001032000000      *                         WSDL_MIME_BINARY - binary data, no encoding
001033000000      *                         WSDL_MIME_BASE64 - converted to base64
001034000000      *
001035000000      *  i_targetCcsid          Specifies the character encoding that the
001036000000      *                         data shall arrive on the server.
001037000000      *                         -1   - No character translation
001038000000      *                         0    - Buffer is translated to the job CCSID
001039000000      *                         >0   - CCSID the buffer is translated to,
001040000000      *                                before it is encoded to Base64 or
001041000000      *                                before it is sent to the server when
001042000000      *                                sent as binary data.
001043000000      *
001044000000      * Return value:
001045000000      *  partID                 Unique ID of the attachment. Usually this ID
001046000000      *                         is stored in the SOAP message, depending on
001047000000      *                         the description of the Web Service.
001048000000      * =====================================================================
001049000000     P TLAddressFinderWSClassSoap_...
001050000000     P NormalizeOne_...
001051000000     P Attachments_addBuffer...
001052000000     P                 B                   export
001053000000     D                 PI                        like(wsdl_partID_t)
001054000000     D  i_name                             const like(wsdl_path_t)
001055000000     D  i_pBuffer                      *   const
001056000000     D  i_size                       10I 0 const
001057000000     D  i_contentType                      const like(wsdl_contentType_t)
001058000000     D  i_transferEncoding...
001059000000     D                                     const like(
001060000000     D                                           wsdl_contentTransferEncoding_t)
001061000000     D                                           options(*nopass: *omit)
001062000000     D  i_targetCcsid                10I 0 const options(*nopass: *omit)
001063000000      *
001064000000      *  Return value
001065000000     D partID          S                   like(wsdl_partID_t) inz
001066000000      *
001067000000      *  Parameter positions
001068000000     D p_transferEncoding...
001069000000     D                 C                   5
001070000000     D p_targetCcsid   C                   6
001071000000      *
001072000000      *  Optional parameters
001073000000     D transferEncoding...
001074000000     D                 S                   like(i_transferEncoding)
001075000000     D targetCcsid     S                   like(i_targetCcsid)
001076000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001077000000      /free
001078000000
001079000000         if (%parms() >= p_transferEncoding and
001080000000             %addr(i_transferEncoding) <> *NULL);
001081000000            transferEncoding = i_transferEncoding;
001082000000         else;
001083000000            transferEncoding = WSDL_MIME_BINARY;
001084000000         endif;
001085000000
001086000000         if (%parms() >= p_targetCcsid and %addr(i_targetCcsid) <> *NULL);
001087000000            targetCcsid = i_targetCcsid;
001088000000         else;
001089000000            targetCcsid = -1; // binary data. no character translation.
001090000000         endif;
001091000000
001092000000         partID = TLAddressFinderWSClassSoap_Attachments_addBuffer(
001093000000                        getMessageContext(): i_name: i_pBuffer: i_size
001094000000                        : i_contentType : transferEncoding: targetCcsid);
001095000000
001096000000         return partID;
001097000000
001098000000      /end-free
001099000000     P                 E
001100000000      *
001101000000      * =====================================================================
001102000000      * This procedure adds a string attachment. The attachment
001103000000      * is sent to the server the next time the web service is called.
001104000000      *
001105000000      * Parameters:
001106000000      *  i_suggestedFileName    Is the suggested file for saving the
001107000000      *                         attachment. Goes into the
001108000000      *                         'Content-Disposition header', attribute 'filename'.
001109000000      *                         The content disposition is always 'attachment'.
001110000000      *
001111000000      *  i_pBuffer              Buffer, containing the attachment data.
001112000000      *
001113000000      *  i_size                 Size of the buffer.
001114000000      *
001115000000      *  i_contentType          Specifies the type of the MIME data.
001116000000      *
001117000000      *  i_transferEncoding     Specifies the encoding of the MIME data.
001118000000      *                         Possible values are:
001119000000      *                         WSDL_MIME_BINARY - binary data, no encoding
001120000000      *                         WSDL_MIME_BASE64 - converted to base64
001121000000      *
001122000000      *  i_targetCcsid          Specifies the character encoding that the
001123000000      *                         data shall arrive on the server.
001124000000      *                         -1   - No character translation
001125000000      *                         0    - Buffer is translated to the job CCSID
001126000000      *                         >0   - CCSID the buffer is translated to,
001127000000      *                                before it is encoded to Base64 or
001128000000      *                                before it is sent to the server when
001129000000      *                                sent as binary data.
001130000000      *
001131000000      * Return value:
001132000000      *  partID                 Unique ID of the attachment. Usually this ID
001133000000      *                         is stored in the SOAP message, depending on
001134000000      *                         the description of the Web Service.
001135000000      * =====================================================================
001136000000     P TLAddressFinderWSClassSoap_...
001137000000     P NormalizeOne_...
001138000000     P Attachments_addString...
001139000000     P                 B                   export
001140000000     D                 PI                        like(wsdl_partID_t)
001141000000     D  i_name                             const like(wsdl_path_t)
001142000000     D  i_string                  32767A         varying options(*varsize)
001143000000     D  i_contentType                      const like(wsdl_contentType_t)
001144000000     D  i_transferEncoding...
001145000000     D                                     const like(
001146000000     D                                           wsdl_contentTransferEncoding_t)
001147000000     D                                           options(*nopass: *omit)
001148000000     D  i_targetCcsid                10I 0 const options(*nopass: *omit)
001149000000      *
001150000000      *  Return value
001151000000     D partID          S                   like(wsdl_partID_t) inz
001152000000      *
001153000000      *  Parameter positions
001154000000     D p_transferEncoding...
001155000000     D                 C                   4
001156000000     D p_targetCcsid   C                   5
001157000000      *
001158000000      *  Optional parameters
001159000000     D transferEncoding...
001160000000     D                 S                   like(i_transferEncoding)
001161000000     D targetCcsid     S                   like(i_targetCcsid)
001162000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001163000000      /free
001164000000
001165000000         if (%parms() >= p_transferEncoding and
001166000000             %addr(i_transferEncoding) <> *NULL);
001167000000            transferEncoding = i_transferEncoding;
001168000000         else;
001169000000            transferEncoding = WSDL_MIME_BINARY;
001170000000         endif;
001171000000
001172000000         if (%parms() >= p_targetCcsid and %addr(i_targetCcsid) <> *NULL);
001173000000            targetCcsid = i_targetCcsid;
001174000000         else;
001175000000            targetCcsid = -1; // binary data. no character translation.
001176000000         endif;
001177000000
001178000000         partID = TLAddressFinderWSClassSoap_Attachments_addBuffer(
001179000000                        getMessageContext(): i_name
001180000000                        : %addr(i_string)+1: %len(i_string)
001181000000                        : i_contentType : transferEncoding: targetCcsid);
001182000000
001183000000         return partID;
001184000000
001185000000      /end-free
001186000000     P                 E
001187000000      *
001188000000      *
001189000000      * ==================================================================
001190000000      * Return value: tns:NormalizeOneResponse
001191000000      * ==================================================================
001192000000     P tns_NormalizeOneResponseStart...
001193000000     P                 B
001194000000     D                 PI
001195000000     D  userdata                       *   value
001196000000     D  depth                        10I 0 value
001197000000     D  namespace                  1024A   varying const
001198000000     D  name                       1024A   varying const
001199000000     D  path                      24576A   varying const
001200000000     D  attrs                          *   dim(32767)
001201000000     D                                     const options(*varsize)
001202000000      *
001203000000     D currentItem     DS                  likeds(tns_NormalizeOneResponse_t)
001204000000     D                                     based(pCurrentItem)
001205000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001206000000      /free
001207000000
001208000000         // Get access to current item
001209000000         pCurrentItem = userdata;
001210000000
001211000000         select;
001212000000         when (depth = 1);
001213000000            if (MultiRef_isReference(attrs));
001214000000               MultiRef_put(
001215000000                  attrs
001216000000                  : XMLSAXParser_getUserData()
001217000000                  : depth
001218000000                  : namespace
001219000000                  : name
001220000000                  : path
001221000000                  : XMLSAXParser_getStartCallback()
001222000000                  : XMLSAXParser_getEndCallback()
001223000000                  : *omit
001224000000                  : %addr(currentItem)
001225000000                  : %size(currentItem)
001226000000                  );
001227000000            endif;
001228000000            return;
001229000000
001230000000         when (depth = 2
001231000000                and
001232000000                name = 'NormalizeOneResult'
001233000000                and
001234000000                namespace = 'http://tempuri.org/');
001235000000            // Value is retrieved in corresponding END procedure
001236000000            if (MultiRef_isReference(attrs));
001237000000               MultiRef_put(
001238000000                  attrs
001239000000                  : XMLSAXParser_getUserData()
001240000000                  : depth
001241000000                  : namespace
001242000000                  : name
001243000000                  : path
001244000000                  : XMLSAXParser_getStartCallback()
001245000000                  : XMLSAXParser_getEndCallback()
001246000000                  : *omit
001247000000                  : %addr(currentItem.NormalizeOneResult)
001248000000                  : %size(currentItem.NormalizeOneResult)
001249000000                  );
001250000000            endif;
001251000000            return;
001252000000
001253000000         endsl;
001254000000
001255000000      /end-free
001256000000      *
001257000000     P                 E
001258000000      *
001259000000      * ==================================================================
001260000000      * Return value: tns:NormalizeOneResponse
001261000000      * ==================================================================
001262000000     P tns_NormalizeOneResponseEnd...
001263000000     P                 B
001264000000     D                 PI
001265000000     D  userdata                       *   value
001266000000     D  depth                        10I 0 value
001267000000     D  namespace                  1024A   varying const
001268000000     D  name                       1024A   varying const
001269000000     D  path                      24576A   varying const
001270000000     D  value                     65535A   varying
001271000000     D  attrs                          *   dim(32767)
001272000000     D                                     const options(*varsize)
001273000000      *
001274000000     D currentItem     DS                  likeds(tns_NormalizeOneResponse_t)
001275000000     D                                     based(pCurrentItem)
001276000000      *
001277000000     D itemValue       DS                  likeds(wsdl_fullElementData_t)
001278000000     D                                     inz
001279000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001280000000      /free
001281000000
001282000000         // Get access to current item
001283000000         pCurrentItem = userdata;
001284000000
001285000000         // Get full element data
001286000000         itemValue = XMLSAXParser_getFullElementData();
001287000000
001288000000         select;
001289000000         when (depth = 2
001290000000                and
001291000000                name = 'NormalizeOneResult'
001292000000                and
001293000000                namespace = 'http://tempuri.org/');
001294000000            if (not Value_isNil(attrs));
001295000000               UnMarshaller_setFieldIdentifier(name: path);
001296000000               UnMarshaller_toStringV6(
001297000000                  %addr(currentItem.NormalizeOneResult)
001298000000                  : %addr(currentItem.NormalizeOneResult: *DATA)
001299000000                  : %size(currentItem.NormalizeOneResult)
001300000000                  : itemValue.pData
001301000000                  : itemValue.size);
001302000000            endif;
001303000000
001304000000         endsl;
001305000000
001306000000      /end-free
001307000000      *
001308000000     P                 E
001309000000      *
001310000000      * =====================================================================
001311000000      *   Reopens a given input stream in order to send it over
001312000000      *   the wire again.
001313000000      * =====================================================================
001314000000     P reOpenInputStream...
001315000000     P                 B
001316000000     D                 PI                         like(wsdl_hStream_t    )
001317000000     D  i_hMsgCtx                          const  like(wsdl_hMsgCtx_t    )
001318000000     D  i_hInpStream                       value  like(wsdl_hStream_t    )
001319000000      *
001320000000      *  Return value
001321000000     D hInpStream      S                   like(wsdl_hStream_t       ) inz
001322000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001323000000      /free
001324000000
001325000000         MessageContext_InputStream_close(i_hInpStream);
001326000000         hInpStream = MessageContext_InputStream_open(i_hMsgCtx);
001327000000
001328000000         return hInpStream;
001329000000
001330000000      /end-free
001331000000     P                 E
001332000000      *
001333000000      * =====================================================================
001334000000      *   Login in to proxy server or http server.
001335000000      *   Returns WSDL_SUCCESS on success, else WSDL_ERROR.
001336000000      * =====================================================================
001337000000     P login...
001338000000     P                 B
001339000000     D                 PI            10I 0
001340000000      *
001341000000      *  Return value
001342000000     D rc              S             10I 0 inz
001343000000      *
001344000000      *  Local fields
001345000000     D currErr         S             10I 0 inz
001346000000      *
001347000000      *  Local fields (static)
001348000000     D lastErr         S             10I 0 inz static
001349000000     D numAttempts     S             10I 0 inz static
001350000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001351000000      /free
001352000000
001353000000         http_DebugLog_appendText(
001354000000         '** ' + %char(%timestamp()) + ': Requesting user name and password');
001355000000
001356000000         http_error(currErr);                // Keep track of the number
001357000000         if (currErr <> lastErr);            // of failed login attempts.
001358000000            lastErr = currErr;
001359000000            numAttempts = 1;
001360000000         else;
001361000000            numAttempts = numAttempts + 1;
001362000000         endif;
001363000000
001364000000         rc = TLAddressFinderWSClassSoap_Port_login(
001365000000                    currErr: numAttempts);
001366000000
001367000000         return rc;
001368000000
001369000000      /end-free
001370000000     P                 E
001371000000      *
001372000000      * =====================================================================
001373000000      *   Sets the content type and the SOAP action of the POST message.
001374000000      * =====================================================================
001375000000     P HTTP_setContentTypeAndSOAPAction...
001376000000     P                 B
001377000000     D                 PI
001378000000     D  o_addlHdrs                 1024A          varying
001379000000     D  i_pUserData                    *   value
001380000000      *
001381000000      *  User Data
001382000000     D headers         DS                  likeds(headers_t) based(i_pUserData)
001383000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001384000000      /free
001385000000
001386000000         if (headers.mimeVersion <> '');
001387000000            o_addlHdrs = headers.mimeVersion;
001388000000         else;
001389000000            o_addlHdrs = '';
001390000000         endif;
001391000000
001392000000         o_addlHdrs = o_addlHdrs + headers.contentType + headers.soapAction;
001393000000
001394000000      /end-free
001395000000     P                 E
001396000000      *
001397000000      * =====================================================================
001398000000      *   Receive response of HTTP post operation.
001399000000      * =====================================================================
001400000000     P HTTP_receiveResponse...
001401000000     P                 B
001402000000     D                 PI            10I 0
001403000000     D  i_hStream                    10I 0 value
001404000000     D  i_data                         *   value
001405000000     D  i_length                     10I 0 value
001406000000      *
001407000000     D rc              S             10I 0 inz(-1)
001408000000     D contentType     S           1024A   inz
001409000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001410000000      /free
001411000000
001412000000         http_DebugLog_appendTextVerbose(
001413000000         '** ' + %char(%timestamp()) + ': Entering ' + f_this() + '()');
001414000000
001415000000         if (not g_HTTP_isInit);
001416000000            http_DebugLog_appendText(
001417000000            '** '+%char(%timestamp())+': Preparing to parse received message');
001418000000            select;
001419000000            when (http_getContentType() = 'text');
001420000000               if (http_getContentSubType() = 'html');
001421000000                  if (f_exist('WSDL2RPG': '*LIBL': '*MSGF'));
001422000000                     clear USR0030;
001423000000                     USR00301 = getPortName();
001424000000                     AppMsg_sendCancelMsg(AppMsg_newError('USR0030': USR0030));
001425000000                  else;
001426000000                     AppMsg_sendCancelMsg(
001427000000                        f_newMsg('CPF9898'
001428000000                              : 'Unexpected HTML data received from web service'
001429000000                              : '*ESCAPE'
001430000000                              : 'QCPFMSG'));
001431000000                  endif;
001432000000               endif;
001433000000            when (http_getContentType() = 'multipart');
001434000000               contentType = %trim(http_header('content-type'));
001435000000               MIMEParser_beginParse(g_hMIMEParser);
001436000000               MIMEParser_setContentType(g_hMIMEParser: contentType);
001437000000               g_SOAPMessageID = http_getContentTypeAttr('start': cTrue);
001438000000               g_isMimeMessage = cTrue;
001439000000               http_DebugLog_appendText(
001440000000               '** ' + %char(%timestamp()) + ': Detected MIME message');
001441000000            endsl;
001442000000            g_HTTP_isInit = cTrue;
001443000000         endif;
001444000000
001445000000         if (g_isMimeMessage);
001446000000            if (MIMEParser_parse(g_hMIMEParser: i_data: i_length) = cTrue);
001447000000               rc = i_length;
001448000000            else;
001449000000               rc = -1;
001450000000               http_DebugLog_appendText(
001451000000               '** '+ %char(%timestamp()) +': Failed parsing MIME message');
001452000000            endif;
001453000000         else;
001454000000            if (parseOrRedirectResponse(i_data: i_length) = cTrue);
001455000000               rc = i_length;
001456000000            else;
001457000000               rc = -1;
001458000000               http_DebugLog_appendText(
001459000000               '** '+ %char(%timestamp()) +': Failed parsing XML message');
001460000000            endif;
001461000000         endif;
001462000000
001463000000         http_DebugLog_appendTextVerbose(
001464000000         '** ' + %char(%timestamp()) + ': Leaving ' + f_this() + '()');
001465000000
001466000000         return rc;
001467000000
001468000000      /end-free
001469000000     P                 E
001470000000      *
001471000000      * =====================================================================
001472000000      *   Parses or redirects the web service response.
001473000000      * =====================================================================
001474000000     P parseOrRedirectResponse...
001475000000     P                 B
001476000000     D                 PI              N
001477000000     D  i_data                         *   value
001478000000     D  i_length                     10I 0 value
001479000000      *
001480000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001481000000      /free
001482000000
001483000000         if (TLAddressFinderWSClassSoap_RedirectResponse_isActive());
001484000000            // Append HTTP response to output file
001485000000            if (not TLAddressFinderWSClassSoap_RedirectResponse_write(
001486000000                          i_data: i_length));
001487000000               http_DebugLog_appendText(
001488000000               '** '+ %char(%timestamp()) +': Failed to redirect +
001489000000                                              XML message');
001490000000               return cFalse;
001491000000            endif;
001492000000         else;
001493000000            // Parse HTTP response
001494000000            if (not XMLSAXParser_parse(g_hSAXParser: i_data: i_length) = cTrue);
001495000000               http_DebugLog_appendText(
001496000000               '** '+ %char(%timestamp()) +': Failed parsing XML message');
001497000000               return cFalse;
001498000000            endif;
001499000000         endif;
001500000000
001501000000         return cTrue;
001502000000
001503000000      /end-free
001504000000     P                 E
001505000000      *
001506000000      * =====================================================================
001507000000      *   Starts a MIME body part.
001508000000      *   This procedure is called whenever a new part is started.
001509000000      * =====================================================================
001510000000      *   Parameters:
001511000000      *     i_pPart            Handle of the current part.
001512000000      *     i_pUserData        Pointer to user data as specified at
001513000000      *                        http_mime_DataSink_initialize().
001514000000      * =====================================================================
001515000000     P HTTPDataSink_startPart...
001516000000     P                 B
001517000000     D                 PI
001518000000     D  i_pPart                        *   const
001519000000     D  i_pUserData                    *   const
001520000000      *
001521000000     D contentID       S            512A   varying inz
001522000000     D contentSubType  S             16A   varying inz
001523000000      *
001524000000      * -------------------------------------------
001525000000      *  TODO: Add fields to open
001526000000      *        the file and to store the
001527000000      *        file descriptor.
001528000000      * -------------------------------------------
001529000000      /IF DEFINED(DEFAULT_ATTACHMENT_HANDLING)
001530000000     D contentType     S             10I 0 inz
001531000000     D fileName        S           1024A   varying inz
001532000000     D fileExt         S             10A   varying inz
001533000000      *
001534000000     D partUserData    DS                  likeds(partUserData_t )
001535000000     D                                     based(pPartUserData)
001536000000      /ENDIF
001537000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001538000000      /free
001539000000
001540000000         if (http_mime_Part_getType(i_pPart) <> cMIME_BASICPART);
001541000000            return;
001542000000         endif;
001543000000
001544000000         g_BodyPart_counter = g_BodyPart_counter + 1;
001545000000
001546000000         contentID      = http_mime_Part_getContentID(i_pPart);
001547000000         contentSubType = http_mime_Part_getContentSubType(i_pPart);
001548000000
001549000000         if (not g_SOAPMessage_done);
001550000000            if (g_SOAPMessageID <> '');
001551000000               if (contentSubType = 'xml' and contentID = g_SOAPMessageID);
001552000000                  g_doParseSOAPMessage = cTrue;
001553000000                  return;
001554000000               endif;
001555000000            else;
001556000000               if (g_BodyPart_counter = 1);
001557000000                  g_doParseSOAPMessage = cTrue;
001558000000                  return;
001559000000               endif;
001560000000            endif;
001561000000         endif;
001562000000
001563000000         // -----------------------------------------
001564000000         // TODO:
001565000000         // Add your code to handle attachments here!
001566000000         // E.g.: Open output file.
001567000000         // -----------------------------------------
001568000000      /IF DEFINED(DEFAULT_ATTACHMENT_HANDLING)
001569000000
001570000000         // Ignore all attachments that are not a BasicPart
001571000000         if (http_mime_Part_getType(i_pPart) <> cMIME_BASICPART);
001572000000            return;
001573000000         endif;
001574000000
001575000000         fileName       = http_mime_Part_getFileName(i_pPart);
001576000000         contentID      = http_mime_Part_getContentID(i_pPart);
001577000000         contentType    = http_mime_Part_getContentType(i_pPart);
001578000000         contentSubType = http_mime_Part_getContentSubType(i_pPart);
001579000000
001580000000         if (contentType = cMIME_TYPE_TEXT);
001581000000            fileExt = 'txt';
001582000000         else;
001583000000            fileExt = contentSubType;
001584000000         endif;
001585000000
001586000000         fileName = TLAddressFinderWSClassSoap_Attachments_getFolder()
001587000000                    + %char(%timestamp()) + '_' + contentID + '_'
001588000000                    + fileName  + '.' + fileExt;
001589000000         fileName = %xlate(':<>': '___': fileName);
001590000000
001591000000         // Assign filename to content-ID and put it into the list of attachments
001592000000         TLAddressFinderWSClassSoap_Attachments_put(
001593000000               contentID
001594000000               : fileName
001595000000               : getOperationUuid());
001596000000
001597000000         // Produce the user data of that Part to
001598000000         // store the file descriptor of the open file.
001599000000         pPartUserData = %alloc(%size(partUserData_t));
001600000000         clear partUserData;
001601000000
001602000000         partUserData.FD = open(fileName
001603000000                                : O_CREAT + O_EXCL +
001604000000                                  O_SHARE_RDONLY + O_WRONLY + O_CCSID
001605000000                                : S_IRWXU + S_IRWXG + S_IRWXO
001606000000                                : 819);   // CCSID does not matter because
001607000000                                          // we write binary data
001608000000
001609000000         // Set user data of the current Part.
001610000000         http_mime_Part_setUserData(i_pPart: pPartUserData);
001611000000      /ENDIF
001612000000
001613000000         return;
001614000000
001615000000      /end-free
001616000000     P                 E
001617000000      *
001618000000      * =====================================================================
001619000000      *   Receives MIME part body data.
001620000000      *   This procedure is called whenever new body data is available.
001621000000      * =====================================================================
001622000000      *   Parameters:
001623000000      *     i_pPart            Handle of the current part.
001624000000      *     i_pUserData        Pointer to user data as specified at
001625000000      *                        http_mime_DataSink_initialize().
001626000000      *     i_data             Pointer to decoded body data.
001627000000      *     i_size             Size of decoded body data.
001628000000      * =====================================================================
001629000000     P HTTPDataSink_bodyData...
001630000000     P                 B
001631000000     D                 PI
001632000000     D  i_pPart                        *   const
001633000000     D  i_pUserData                    *   const
001634000000     D  i_data                         *   const
001635000000     D  i_size                       10I 0 const
001636000000      *
001637000000      * -------------------------------------------
001638000000      *  TODO: Add fields to write
001639000000      *        the attachment to the file
001640000000      *        opened in HTTPDataSink_startPart().
001641000000      * -------------------------------------------
001642000000      /IF DEFINED(DEFAULT_ATTACHMENT_HANDLING)
001643000000     D rc              S             10I 0 inz
001644000000      *
001645000000     D partUserData    DS                  likeds(partUserData_t )
001646000000     D                                     based(pPartUserData)
001647000000      /ENDIF
001648000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001649000000      /free
001650000000
001651000000         if (g_doParseSOAPMessage);
001652000000            parseOrRedirectResponse(i_data: i_size);
001653000000            return;
001654000000         endif;
001655000000
001656000000         // -----------------------------------------
001657000000         // TODO:
001658000000         // Add your code to handle attachments here!
001659000000         // E.g.: Write received data to output file.
001660000000         // -----------------------------------------
001661000000
001662000000      /IF DEFINED(DEFAULT_ATTACHMENT_HANDLING)
001663000000         // Gain access to the user data of the current Part.
001664000000         pPartUserData = http_mime_Part_getUserData(i_pPart);
001665000000         if (pPartUserData = *NULL);
001666000000            return;
001667000000         endif;
001668000000
001669000000         // Return to caller if no file is open.
001670000000         if (partUserData.FD <= 0);
001671000000            return;
001672000000         endif;
001673000000
001674000000         // Append attachment data to the file.
001675000000         rc = write(partUserData.FD: i_data: i_size);
001676000000      /ENDIF
001677000000
001678000000         return;
001679000000
001680000000      /end-free
001681000000     P                 E
001682000000      *
001683000000      * =====================================================================
001684000000      *   Ends a MIME body part.
001685000000      *   This procedure is called whenever a new part ends.
001686000000      * =====================================================================
001687000000      *   Parameters:
001688000000      *     i_pPart            Handle of the current part.
001689000000      *     i_pUserData        Pointer to user data as specified at
001690000000      *                        http_mime_DataSink_initialize().
001691000000      * =====================================================================
001692000000     P HTTPDataSink_endPart...
001693000000     P                 B
001694000000     D                 PI
001695000000     D  i_pPart                        *   const
001696000000     D  i_pUserData                    *   const
001697000000      *
001698000000      * -------------------------------------------
001699000000      *  TODO: Add fields to close the file
001700000000      *        opened in HTTPDataSink_startPart().
001701000000      * -------------------------------------------
001702000000      /IF DEFINED(DEFAULT_ATTACHMENT_HANDLING)
001703000000     D rc              S             10I 0 inz
001704000000      *
001705000000     D partUserData    DS                  likeds(partUserData_t )
001706000000     D                                     based(pPartUserData)
001707000000      /ENDIF
001708000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001709000000      /free
001710000000
001711000000         if (http_mime_Part_getType(i_pPart) <> cMIME_BASICPART);
001712000000            return;
001713000000         endif;
001714000000
001715000000         if (g_doParseSOAPMessage);
001716000000            g_doParseSOAPMessage = cFalse;
001717000000            g_SOAPMessage_done   = cTrue;
001718000000            return;
001719000000         endif;
001720000000
001721000000         // -----------------------------------------
001722000000         // TODO:
001723000000         // Add your code to handle attachments here!
001724000000         // E.g.: Close output file.
001725000000         // -----------------------------------------
001726000000      /IF DEFINED(DEFAULT_ATTACHMENT_HANDLING)
001727000000
001728000000         // Gain access to the user data of the current Part.
001729000000         pPartUserData = http_mime_Part_getUserData(i_pPart);
001730000000         if (pPartUserData = *NULL);
001731000000            return;
001732000000         endif;
001733000000
001734000000         // Return to caller if no file is open.
001735000000         if (partUserData.FD <= 0);
001736000000            return;
001737000000         endif;
001738000000
001739000000         // Close the file.
001740000000         callp close(partUserData.FD);
001741000000         partUserData.FD = 0;
001742000000
001743000000         // Free memory allocated in HTTPDataSink_startPart()
001744000000         dealloc(N) pPartUserData;
001745000000      /ENDIF
001746000000
001747000000         return;
001748000000
001749000000      /end-free
001750000000     P                 E
001751000000      *
001752000000      * =====================================================================
001753000000      *   SOAP message: Envelope
001754000000      * =====================================================================
001755000000     P SOAPMessage_Envelope...
001756000000     P                 B
001757000000     D                 PI
001758000000     D   userdata                      *   value
001759000000     D   depth                       10I 0 value
001760000000     D   namespace                 1024A   varying const
001761000000     D   name                      1024A   varying const
001762000000     D   path                     24576A   varying const
001763000000     D   attrs                         *   dim(32767)
001764000000     D                                     const options(*varsize)
001765000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001766000000      /free
001767000000
001768000000         if (depth = 1 and f_lcase(name) = 'html');
001769000000            if (f_exist('WSDL2RPG': '*LIBL': '*MSGF'));
001770000000               clear USR0030;
001771000000               USR00301 = getPortName();
001772000000               AppMsg_sendCancelMsg(AppMsg_newError('USR0030': USR0030));
001773000000            else;
001774000000               AppMsg_sendCancelMsg(
001775000000                     f_newMsg('CPF9898'
001776000000                              : 'Unexpected HTML data received from web service'
001777000000                              : '*ESCAPE'
001778000000                              : 'QCPFMSG'));
001779000000            endif;
001780000000         endif;
001781000000
001782000000         select;
001783000000         when (path = '/Envelope/Header');
001784000000            XMLSAXParser_delegateElementProcessing(
001785000000               g_pRespSoapHeader
001786000000               : %paddr('SOAPMessage_unexpectedElementStart')
001787000000               : %paddr('SOAPMessage_unexpectedElementEnd'));
001788000000           return;
001789000000
001790000000         when (path = '/Envelope/Body');
001791000000
001792000000            select;
001793000000            when (name = 'Fault');
001794000000               XMLSAXParser_delegateElementProcessing(
001795000000                  %addr(g_errors.soapFault)
001796000000                  : %paddr('SOAPMessage_FaultStart')
001797000000                  : %paddr('SOAPMessage_FaultEnd'));
001798000000              return;
001799000000
001800000000            when (MultiRef_isData(attrs));
001801000000               XMLSAXParser_delegateElementProcessing(
001802000000                  *NULL
001803000000                  : MultiRef_getStartCallback()
001804000000                  : MultiRef_getEndCallback());
001805000000               return;
001806000000
001807000000            other;
001808000000               XMLSAXParser_delegateElementProcessing(
001809000000                  userdata
001810000000                  : %paddr('tns_NormalizeOneResponseStart')
001811000000                  : %paddr('tns_NormalizeOneResponseEnd'));
001812000000              return;
001813000000            endsl;
001814000000
001815000000         endsl;
001816000000
001817000000         return;
001818000000
001819000000      /end-free
001820000000     P                 E
001821000000      *
001822000000      * =====================================================================
001823000000      *   SOAP message: fault information
001824000000      * =====================================================================
001825000000     P SOAPMessage_FaultStart...
001826000000     P                 B
001827000000     D                 PI
001828000000     D   userdata                      *   value
001829000000     D   depth                       10I 0 value
001830000000     D   namespace                 1024A   varying const
001831000000     D   name                      1024A   varying const
001832000000     D   path                     24576A   varying const
001833000000     D   attrs                         *   dim(32767)
001834000000     D                                     const options(*varsize)
001835000000      *
001836000000     D fault...
001837000000     D                 DS                  based(userdata)
001838000000     D                                     likeds(wsdl_soapFault_t )
001839000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001840000000      /free
001841000000
001842000000         if (depth = 1);
001843000000            g_errors.errType = WSDL_HTTP_ERROR_SOAP;
001844000000            g_errors.soapFault.code = 'WSDL2RPG';
001845000000            g_errors.soapFault.string = 'WSDL2RPG: Unspecified SOAP error';
001846000000            return;
001847000000         endif;
001848000000
001849000000         select;
001850000000         when (name = 'detail');
001851000000            XMLSAXParser_delegateElementProcessing(
001852000000               %addr(fault.detail)
001853000000               : %paddr('SOAPMessage_FaultDetailStart')
001854000000               : %paddr('SOAPMessage_FaultDetailEnd'));
001855000000         endsl;
001856000000
001857000000      /end-free
001858000000     P                 E
001859000000      *
001860000000      * =====================================================================
001861000000      *   SOAP message: fault information
001862000000      * =====================================================================
001863000000     P SOAPMessage_FaultEnd...
001864000000     P                 B
001865000000     D                 PI
001866000000     D   userdata                      *   value
001867000000     D   depth                       10I 0 value
001868000000     D   namespace                 1024A   varying const
001869000000     D   name                      1024A   varying const
001870000000     D   path                     24576A   varying const
001871000000     D   value                    65535A   varying const
001872000000     D   attrs                         *   dim(32767)
001873000000     D                                     const options(*varsize)
001874000000      *
001875000000     D fault...
001876000000     D                 DS                  based(userdata)
001877000000     D                                     likeds(wsdl_soapFault_t )
001878000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001879000000      /free
001880000000
001881000000         if (depth = 1);
001882000000            return;
001883000000         endif;
001884000000
001885000000         select;
001886000000         when (name = 'faultcode');
001887000000            fault.code = value;
001888000000         when (name = 'faultstring');
001889000000            fault.string = value;
001890000000         endsl;
001891000000
001892000000      /end-free
001893000000     P                 E
001894000000      *
001895000000      * =====================================================================
001896000000      *   SOAP message: fault details
001897000000      * =====================================================================
001898000000     P SOAPMessage_FaultDetailStart...
001899000000     P                 B
001900000000     D                 PI
001901000000     D   userdata                      *   value
001902000000     D   depth                       10I 0 value
001903000000     D   namespace                 1024A   varying const
001904000000     D   name                      1024A   varying const
001905000000     D   path                     24576A   varying const
001906000000     D   attrs                         *   dim(32767)
001907000000     D                                     const options(*varsize)
001908000000      *
001909000000     D detail...
001910000000     D                 DS                  based(userdata)
001911000000     D                                     likeds(wsdl_soap_faultDetail_t)
001912000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001913000000      /free
001914000000
001915000000         if (depth = 1);
001916000000            return;
001917000000         endif;
001918000000
001919000000         select;
001920000000         endsl;
001921000000
001922000000      /end-free
001923000000     P                 E
001924000000      *
001925000000      * =====================================================================
001926000000      *   SOAP message: fault details
001927000000      * =====================================================================
001928000000     P SOAPMessage_FaultDetailEnd...
001929000000     P                 B
001930000000     D                 PI
001931000000     D   userdata                      *   value
001932000000     D   depth                       10I 0 value
001933000000     D   namespace                 1024A   varying const
001934000000     D   name                      1024A   varying const
001935000000     D   path                     24576A   varying const
001936000000     D   value                    65535A   varying const
001937000000     D   attrs                         *   dim(32767)
001938000000     D                                     const options(*varsize)
001939000000      *
001940000000     D detail...
001941000000     D                 DS                  based(userdata)
001942000000     D                                     likeds(wsdl_soap_faultDetail_t)
001943000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001944000000      /free
001945000000
001946000000         if (depth = 1);
001947000000            return;
001948000000         endif;
001949000000
001950000000         select;
001951000000         when (name = 'hostname');
001952000000            detail.hostname = value;
001953000000         endsl;
001954000000
001955000000      /end-free
001956000000     P                 E
001957000000      *
001958000000      * =====================================================================
001959000000      *   SOAP message: NULL callback procedure
001960000000      * =====================================================================
001961000000     P SOAPMessage_unexpectedElementStart...
001962000000     P                 B
001963000000     D                 PI
001964000000     D   userdata                      *   value
001965000000     D   depth                       10I 0 value
001966000000     D   namespace                 1024A   varying const
001967000000     D   name                      1024A   varying const
001968000000     D   path                     24576A   varying const
001969000000     D   attrs                         *   dim(32767)
001970000000     D                                     const options(*varsize)
001971000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
001972000000      /free
001973000000
001974000000         if (ignoreUnexpectedSoapHeader());
001975000000            http_DebugLog_appendText(
001976000000               'Warning: Received unexpected Soap header: <' + name + '>');
001977000000            return;
001978000000         endif;
001979000000
001980000000         if (f_exist('WSDL2RPG': '*LIBL': '*MSGF'));
001981000000            clear USR0042;
001982000000            USR00421 = 'SOAPMessage_unexpectedElementStart';
001983000000            USR00422 = 'SOAPMessage_unexpectedElementEnd';
001984000000            AppMsg_sendCancelMsg(AppMsg_newError('USR0042': USR0042));
001985000000         else;
001986000000            AppMsg_sendCancelMsg(
001987000000               f_newMsg('CPF9898'
001988000000                     : 'Unexpected Soap element received from web service.'
001989000000                     : '*ESCAPE'
001990000000                     : 'QCPFMSG'));
001991000000         endif;
001992000000
001993000000         return;
001994000000
001995000000      /end-free
001996000000     P                 E
001997000000      *
001998000000      * =====================================================================
001999000000      *   SOAP message: NULL callback procedure
002000000000      * =====================================================================
002001000000     P SOAPMessage_unexpectedElementEnd...
002002000000     P                 B
002003000000     D                 PI
002004000000     D   userdata                      *   value
002005000000     D   depth                       10I 0 value
002006000000     D   namespace                 1024A   varying const
002007000000     D   name                      1024A   varying const
002008000000     D   path                     24576A   varying const
002009000000     D   value                    65535A   varying const
002010000000     D   attrs                         *   dim(32767)
002011000000     D                                     const options(*varsize)
002012000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002013000000      /free
002014000000
002015000000         if (ignoreUnexpectedSoapHeader());
002016000000            http_DebugLog_appendText(
002017000000               'Warning: Received unexpected Soap header: ' + value);
002018000000            http_DebugLog_appendText(
002019000000               'Warning: Received unexpected Soap header: </' + name + '>');
002020000000            return;
002021000000         endif;
002022000000
002023000000         if (f_exist('WSDL2RPG': '*LIBL': '*MSGF'));
002024000000            clear USR0042;
002025000000            USR00421 = 'SOAPMessage_unexpectedElementStart';
002026000000            USR00422 = 'SOAPMessage_unexpectedElementEnd';
002027000000            AppMsg_sendCancelMsg(AppMsg_newError('USR0042': USR0042));
002028000000         else;
002029000000            AppMsg_sendCancelMsg(
002030000000               f_newMsg('CPF9898'
002031000000                     : 'Unexpected Soap element received from web service.'
002032000000                     : '*ESCAPE'
002033000000                     : 'QCPFMSG'));
002034000000         endif;
002035000000
002036000000         return;
002037000000
002038000000      /end-free
002039000000     P                 E
002040000000      *
002041000000      * =====================================================================
002042000000      *   Specifies, whether unexpected Soap headers are ignored or not.
002043000000      * =====================================================================
002044000000     P ignoreUnexpectedSoapHeader...
002045000000     P                 B
002046000000     D                 PI              N
002047000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002048000000      /free
002049000000
002050000000         return cFalse;
002051000000
002052000000      /end-free
002053000000     P                 E
002054000000      *
002055000000      * =====================================================================
002056000000      *   Returns the UUID of this web service operation.
002057000000      *   All attachments and allocated memory block are attached to
002058000000      *   this UUID.
002059000000      * =====================================================================
002060000000     P getOperationUuid...
002061000000     P                 B
002062000000     D                 PI                          like(wsdl_uuid_t )
002063000000      *
002064000000      *  Return value
002065000000     D uuid            S                   like(wsdl_uuid_t ) inz
002066000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002067000000      /free
002068000000
002069000000         uuid = TLAddressFinderWSClassSoap_Port_getUuid();
002070000000
002071000000         return uuid;
002072000000
002073000000      /end-free
002074000000     P                 E
002075000000      *
002076000000      * =====================================================================
002077000000      *   Returns the name of the web service port.
002078000000      * =====================================================================
002079000000     P getPortName...
002080000000     P                 B
002081000000     D                 PI                          like(wsdl_portName_t )
002082000000      *
002083000000      *  Return value
002084000000     D name            S                   like(wsdl_portName_t ) inz
002085000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002086000000      /free
002087000000
002088000000         name = TLAddressFinderWSClassSoap_Port_getName();
002089000000
002090000000         return name;
002091000000
002092000000      /end-free
002093000000     P                 E
002094000000      *
002095000000      * =====================================================================
002096000000      *   Returns the name of this web service operation.
002097000000      * =====================================================================
002098000000     P getOperationName...
002099000000     P                 B
002100000000     D                 PI                          like(wsdl_operName_t )
002101000000      *
002102000000      *  Return value
002103000000     D name            S                   like(wsdl_operName_t ) inz
002104000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002105000000      /free
002106000000
002107000000         name = 'NormalizeOne';
002108000000
002109000000         return name;
002110000000
002111000000      /end-free
002112000000     P                 E
002113000000      *
002114000000      * =====================================================================
002115000000      *   Returns the CCSID of the remote POST data.
002116000000      * =====================================================================
002117000000     P getPostCcsid...
002118000000     P                 B
002119000000     D                 PI            10I 0
002120000000      *
002121000000      *  Return value
002122000000     D post_ccsid      S             10I 0 inz(1208)
002123000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002124000000      /free
002125000000
002126000000         post_ccsid = TLAddressFinderWSClassSoap_Port_getPostCcsid();
002127000000
002128000000         return post_ccsid;
002129000000
002130000000      /end-free
002131000000     P                 E
002132000000      *
002133000000      * =====================================================================
002134000000      *   Returns the timeout in seconds that HTTPAPI waits
002135000000      *   for a connection to the server.
002136000000      * =====================================================================
002137000000     P getTimeout...
002138000000     P                 B
002139000000     D                 PI            10I 0
002140000000      *
002141000000      *  Return value
002142000000     D timeoutSecs     S             10I 0 inz(HTTP_TIMEOUT)
002143000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002144000000      /free
002145000000
002146000000         timeoutSecs = TLAddressFinderWSClassSoap_Port_getTimeout();
002147000000
002148000000         return timeoutSecs;
002149000000
002150000000      /end-free
002151000000     P                 E
002152000000      *
002153000000      * =====================================================================
002154000000      *   Returns the user agent identification used by HTTPAPI
002155000000      *   to identify the client to the server.
002156000000      * =====================================================================
002157000000     P getUserAgent...
002158000000     P                 B
002159000000     D                 PI                         like(wsdl_userAgent_t )
002160000000      *
002161000000      *  Return value
002162000000     D userAgent       S                   like(wsdl_userAgent_t )
002163000000     D                                     inz(HTTP_USERAGENT)
002164000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002165000000      /free
002166000000
002167000000         userAgent = TLAddressFinderWSClassSoap_Port_getUserAgent();
002168000000
002169000000         return userAgent;
002170000000
002171000000      /end-free
002172000000     P                 E
002173000000      *
002174000000      * =====================================================================
002175000000      *   Returns the message context. The context is created if
002176000000      *   it does not yet exist.
002177000000      * =====================================================================
002178000000     P getMessageContext...
002179000000     P                 B
002180000000     D                 PI                         like(wsdl_hMsgCtx_t)
002181000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002182000000      /free
002183000000
002184000000         if (MessageContext_isNull(g_hMsgCtx));
002185000000            g_hMsgCtx = MessageContext_new();
002186000000         endif;
002187000000
002188000000         return g_hMsgCtx;
002189000000
002190000000      /end-free
002191000000     P                 E
002192000000      *
002193000000      * =====================================================================
002194000000      *   Returns cTrue if the response must be redirected to a stream
002195000000      *   file, otherwise cFalse.
002196000000      * =====================================================================
002197000000     P mustRedirectStmf...
002198000000     P                 B
002199000000     D                 PI              N
002200000000      *
002201000000      *  Return value
002202000000     D mustRedirectStmf...
002203000000     D                 S               N   inz(cFalse)
002204000000      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
002205000000      /free
002206000000
002207000000         mustRedirectStmf =
002208000000            TLAddressFinderWSClassSoap_RedirectResponse_isActive();
002209000000
002210000000         return mustRedirectStmf;
002211000000
002212000000      /end-free
002213000000     P                 E
002214000000      *
